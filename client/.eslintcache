[{"/home/jo/DEV/social-crud/client/src/index.js":"1","/home/jo/DEV/social-crud/client/src/App.js":"2","/home/jo/DEV/social-crud/client/src/components/Posts/Posts.js":"3","/home/jo/DEV/social-crud/client/src/components/Form/Form.js":"4","/home/jo/DEV/social-crud/client/src/components/Posts/Post/Post.js":"5","/home/jo/DEV/social-crud/client/src/styles.js":"6","/home/jo/DEV/social-crud/client/src/components/Form/styles.js":"7","/home/jo/DEV/social-crud/client/src/components/Posts/Post/styles.js":"8","/home/jo/DEV/social-crud/client/src/components/Posts/styles.js":"9","/home/jo/DEV/social-crud/client/src/reducers/index.js":"10","/home/jo/DEV/social-crud/client/src/reducers/posts.js":"11","/home/jo/DEV/social-crud/client/src/actions/posts.js":"12","/home/jo/DEV/social-crud/client/src/api/index.js":"13"},{"size":473,"mtime":1606922590493,"results":"14","hashOfConfig":"15"},{"size":1557,"mtime":1606952432287,"results":"16","hashOfConfig":"15"},{"size":935,"mtime":1606953077170,"results":"17","hashOfConfig":"15"},{"size":4116,"mtime":1606961148559,"results":"18","hashOfConfig":"15"},{"size":2516,"mtime":1606952432279,"results":"19","hashOfConfig":"15"},{"size":394,"mtime":1606799359047,"results":"20","hashOfConfig":"15"},{"size":425,"mtime":1606799359047,"results":"21","hashOfConfig":"15"},{"size":962,"mtime":1606799359047,"results":"22","hashOfConfig":"15"},{"size":266,"mtime":1606799359047,"results":"23","hashOfConfig":"15"},{"size":110,"mtime":1606799359047,"results":"24","hashOfConfig":"15"},{"size":478,"mtime":1606952432279,"results":"25","hashOfConfig":"15"},{"size":895,"mtime":1606961855324,"results":"26","hashOfConfig":"15"},{"size":272,"mtime":1606952574448,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"wyaplw",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jo/DEV/social-crud/client/src/index.js",[],["58","59"],"/home/jo/DEV/social-crud/client/src/App.js",["60"],"import React, { useEffect, useState } from 'react';\nimport { Container, AppBar, Typography, Grow, Grid } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport logo from './images/logo.png';\nimport { getPosts } from './actions/posts';\nimport Posts from './components/Posts/Posts.js';\nimport Form from './components/Form/Form.js';\nimport useStyles from './styles';\n\nconst App = () => {\n    const [currentId, setCurrentId] = useState(null);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getPosts());\n    }, [dispatch]);\n\n    return (\n        <Container maxWidth=\"lg\">\n            <AppBar className={classes.appBar} position=\"static\" color=\"inherit\">\n                <img className={classes.image} src={logo} alt=\"social CRUD\" width=\"17%\"></img>\n            </AppBar>\n            <Grow in>\n                <Container>\n                    <Grid \n                        container\n                        justify=\"space-between\"\n                        alignItems=\"stretch\"\n                        spacing={3}\n                    >\n                        <Grid item xs={12} sm={8}>\n                            <Posts setCurrentId={setCurrentId} />\n                        </Grid>\n                        <Grid item xs={12} sm={4}>\n                            <Form currentId={currentId} setCurrentid={setCurrentId} />\n                        </Grid>\n                    </Grid>\n                </Container>\n            </Grow>\n        </Container>\n    )\n}\n\nexport default App;\n","/home/jo/DEV/social-crud/client/src/components/Posts/Posts.js",[],"/home/jo/DEV/social-crud/client/src/components/Form/Form.js",["61"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FileBase from 'react-file-base64';\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\n\nimport { createPost, updatePost } from '../../actions/posts';\nimport useStyles from './styles';\n\nconst Form = ({ currentId, setCurrentId }) => {\n    const postObjectTemplate = {\n        creator: '',\n        title: '',\n        message: '',\n        tags: '',\n        selectedFile: '',\n    }\n    const [postData, setPostData] = useState(postObjectTemplate)\n    const post = useSelector((state) => currentId ? state.posts.find(post => post._id === currentId) : null);\n    //useSelector(state => console.log(state.posts));\n    console.log(\"post\",post);\n    console.log(\"currentId\",currentId);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (post) setPostData(post);\n        console.log(\"postData\", postData);\n    }, [post]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (currentId) {\n            console.log(\"dispatching an update\")\n            dispatch(updatePost(currentId, postData));\n        } else {\n            console.log(\"dispatching a creation\")\n            dispatch(createPost(postData));\n        }\n    }\n\n    const clear = () => {\n        setCurrentId(null);\n        setPostData(postObjectTemplate);\n    }\n\n    return (\n        <Paper className={classes.paper}>\n            <form\n                autoComplete=\"off\"\n                noValidate\n                className={`${classes.root} ${classes.form}`}\n                onSubmit={handleSubmit}\n            >\n                <Typography variant=\"h6\">{currentId ? 'Edit' : 'Create & share'} a memory</Typography>\n                <TextField\n                    name=\"creator\"\n                    variant=\"outlined\"\n                    label=\"Creator\"\n                    value={postData.creator || ''}\n                    fullWidth\n                    onChange={(e) => {\n                        setPostData({ ...postData, creator: e.target.value })\n                    }}\n                />\n                <TextField\n                    name=\"title\"\n                    variant=\"outlined\"\n                    label=\"Title\"\n                    value={postData.title || ''}\n                    fullWidth\n                    onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n                />\n                <TextField\n                    name=\"message\"\n                    variant=\"outlined\"\n                    label=\"Message\"\n                    value={postData.message || ''}\n                    fullWidth\n                    onChange={(e) => setPostData({ ...postData, message: e.target.value })}\n                />\n                <TextField\n                    name=\"tags\"\n                    variant=\"outlined\"\n                    label=\"Tags\"\n                    value={postData.tags || ''}\n                    fullWidth\n                    onChange={(e) => setPostData({ ...postData, tags: e.target.value })}\n                />\n                <div className={classes.fileInput}>\n                    <FileBase\n                        type=\"file\"\n                        multiple={false}\n                        onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })}\n                    >\n                    </FileBase>\n                </div>\n                <Button\n                    className={classes.buttonSubmit}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"large\"\n                    type=\"submit\"\n                    fullWidth\n                >\n                    Submit\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    size=\"small\"\n                    onClick={clear}\n                    fullWidth\n                >\n                    Clear\n                </Button>\n            </form>\n        </Paper>\n    )\n}\n\nexport default Form;\n","/home/jo/DEV/social-crud/client/src/components/Posts/Post/Post.js",[],"/home/jo/DEV/social-crud/client/src/styles.js",[],"/home/jo/DEV/social-crud/client/src/components/Form/styles.js",[],"/home/jo/DEV/social-crud/client/src/components/Posts/Post/styles.js",[],"/home/jo/DEV/social-crud/client/src/components/Posts/styles.js",[],"/home/jo/DEV/social-crud/client/src/reducers/index.js",[],"/home/jo/DEV/social-crud/client/src/reducers/posts.js",["62"],"const ACTIONS = {\n    FETCH_ALL: 'FETCH_ALL',\n    CREATE: 'CREATE',\n    UPDATE: 'UPDATE',\n};\n\nexport default (posts = [], action) => {\n    switch (action.type) {\n        case ACTIONS.FETCH_ALL:\n            return action.payload;\n        case ACTIONS.CREATE:\n            return [...posts, action.payload];\n        case ACTIONS.UPDATE:\n            return posts.map(post => post.id === action.payload._id ? action.payload : post);\n        default:\n            return posts;\n    }\n}","/home/jo/DEV/social-crud/client/src/actions/posts.js",[],"/home/jo/DEV/social-crud/client/src/api/index.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":2,"column":29,"nodeType":"69","messageId":"70","endLine":2,"endColumn":39},{"ruleId":"71","severity":1,"message":"72","line":28,"column":8,"nodeType":"73","endLine":28,"endColumn":14,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":7,"column":1,"nodeType":"77","endLine":18,"endColumn":2},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'postData'. Either include it or remove the dependency array.","ArrayExpression",["80"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [post, postData]",{"range":"83","text":"84"},[992,998],"[post, postData]"]